<?xml version="1.0"?>

<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="loki_ii">
  <xacro:arg name="robot_name" default=""/>
  <xacro:arg name="tf_prefix" default=""/>
  <xacro:arg name="robot_config" default="$(find loki_base)/config/robot_017.yaml"/>
  <xacro:arg name="model_extras" default=""/>

  <!-- <gazebo>
    <plugin name="$(arg robot_name)_loki_gazebo_plugins" filename="libloki_gazebo_plugins_synch.so">
      <alwaysOn>true</alwaysOn>
      <updateRate>20</updateRate>
      <robotNamespace>$(arg robot_name)</robotNamespace>
      <commandTopic>base_state</commandTopic>
      <odometryTopic>odometry/gazebo</odometryTopic>
      <odometryFrame>$(arg tf_prefix)odom</odometryFrame>
      <robotBaseFrame>$(arg tf_prefix)base_link</robotBaseFrame>
      <steering0>$(arg tf_prefix)steering0</steering0>
      <steering1>$(arg tf_prefix)steering1</steering1>
      <steering2>$(arg tf_prefix)steering2</steering2>
      <steering3>$(arg tf_prefix)steering3</steering3>
      <steering4>$(arg tf_prefix)steering4</steering4>
      <steering5>$(arg tf_prefix)steering5</steering5>
      <steering6>$(arg tf_prefix)steering6</steering6>
      <steering7>$(arg tf_prefix)steering7</steering7>
      <steering8>$(arg tf_prefix)steering8</steering8>
      <steering9>$(arg tf_prefix)steering9</steering9>
      <steering10>s$(arg tf_prefix)steering10</steering10>
      <wheel0>$(arg tf_prefix)wheel0</wheel0>
      <wheel1>$(arg tf_prefix)wheel1</wheel1>
      <wheel2>$(arg tf_prefix)wheel2</wheel2>
      <wheel3>$(arg tf_prefix)wheel3</wheel3>
      <wheel4>$(arg tf_prefix)wheel4</wheel4>
      <wheel5>$(arg tf_prefix)wheel5</wheel5>
      <wheel6>$(arg tf_prefix)wheel6</wheel6>
      <wheel7>$(arg tf_prefix)wheel7</wheel7>
      <wheel8>$(arg tf_prefix)wheel8</wheel8>
      <wheel9>$(arg tf_prefix)wheel9</wheel9>
      <wheel10>$(arg tf_prefix)wheel10</wheel10>
    </plugin>
  </gazebo> -->

   <xacro:macro name="cuboid_inertial" params="mass length width height xyz rpy">
    <inertial>
      <mass value="${mass}"/>
      <origin xyz="${xyz}" rpy="${rpy}"/>
      <inertia ixx="${(mass/12)*(width**2 + height**2)}" ixy="0.0" ixz="0.0" iyy="${(mass/12)*(length**2 + height**2)}" iyz="0.0" izz="${(mass/12)*(length**2 + length**2)}" />
    </inertial>
  </xacro:macro>


  <xacro:macro name="cylinder_inertial" params="mass length radius xyz rpy">
    <inertial>
      <mass value="${mass}"/>
      <origin xyz="${xyz}" rpy="${rpy}"/>
      <inertia ixx="${(mass/12)*(3 * pow(radius,2) + pow(length,2))}" ixy="0.0" ixz="0.0" iyy="${(mass/12)*(3 * pow(radius,2) + pow(length,2))}" iyz="0.0" izz="${(mass/2)*(radius**2)}" />
    </inertial>
  </xacro:macro>

  <!-- COMMON PARAMETERS -->
  <!-- Height of robot -->
  <xacro:property name="platform_height" value="0.65" />

  <!-- Frame member paramters -->
  <xacro:property name="frame_beam_width" value="0.040" />
  <xacro:property name="frame_beam_height" value="0.190" />
  <xacro:property name="pipe_radius" value="0.02" />

  <!-- Wheel module parameters -->
  <xacro:property name="leg_radius" value="0.040" />
  <xacro:property name="wheel_width" value="0.160" />

  <!-- Battery parameters -->
  <xacro:property name="battery_length" value="0.500" />
  <xacro:property name="battery_width" value="0.250" />
  <xacro:property name="battery_height" value="0.400" />
  <xacro:property name="battery_dxy" value="0.00" />
  <xacro:property name="battery_dz" value="-0.150" />

<!-- ROBOT-SPECIFIC PARAMETERS -->
  <!-- Parameters file in config directory as specified in argument -->
  <xacro:property name="base_params" value="${xacro.load_yaml('$(arg robot_config)')}"/>
  <xacro:property name="model_extras" value="$(arg model_extras)"/>

  <!-- MATERIAL DEFINITIONS -->
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="red">
    <color rgba="1 0 0 1"/>
  </material>
  <material name="green">
    <color rgba="0 1 0 1"/>
  </material>
  <material name="alu">
    <color rgba="0.75 0.75 0.75 1"/>
  </material>

<!-- MACROS -->
  <!-- Wheel module creating macro-->
  <xacro:macro name="make_legs" params="current_index:=0">

    <xacro:property name="top" value="top${current_index}" />
    <xacro:property name="leg" value="leg${current_index}" />
    <xacro:property name="wheel" value="wheel${current_index}" />
    <xacro:property name="drive" value="drive${current_index}" />
    <xacro:property name="steering" value="steering${current_index}" />
    <xacro:property name="radius_wheel" value="${base_params['motor_drives'][drive]['r_wheel']}" />
    <xacro:property name="leg_mesh" value="${base_params['motor_drives'][drive]['leg_mesh']}" />
    <xacro:property name="x" value="${base_params['motor_drives'][drive]['x']}" />
    <xacro:property name="y" value="${base_params['motor_drives'][drive]['y']}" />
    <xacro:property name="z" value="${platform_height}" />
    <xacro:property name="leg_length" value="${platform_height - radius_wheel*4}" />
    <!--radius_wheel*4 will cause the leg box to end right where the wheel starts-->
    <xacro:property name="leg_z" value="${leg_length / 2 + radius_wheel}" />



    <xacro:if value="${leg_mesh == 0}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="0 0 ${pi}"/>
      <xacro:property name="top_mesh_path" value="package://loki_description/meshes/tower_modules/DUMMY-TOWER-M.stl"/>
      <xacro:property name="top_origin" value="${x} ${y} ${platform_height}" />
      <xacro:property name="top_rot" value="0 0 ${pi}"/>
      <xacro:property name="top_color" value="white"/>
    </xacro:if>

    <xacro:if value="${leg_mesh == 1}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-MIRROR-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="0 0 0"/>
      <xacro:property name="top_mesh_path" value="package://loki_description/meshes/tower_modules/DUMMY-TOWER-MIRROR-M.stl"/>
      <xacro:property name="top_origin" value="${x} ${y} ${platform_height}" />
      <xacro:property name="top_rot" value="0 0 0"/>
      <xacro:property name="top_color" value="white"/>
    </xacro:if>

<xacro:if value="${leg_mesh == 2}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="0 0 0"/>
      <xacro:property name="top_mesh_path" value="package://loki_description/meshes/tower_modules/DUMMY-TOWER-M.stl"/>
      <xacro:property name="top_origin" value="${x} ${y} ${platform_height}" />
      <xacro:property name="top_rot" value="0 0 0"/>
      <xacro:property name="top_color" value="white"/>
    </xacro:if>

    <xacro:if value="${leg_mesh == 3}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-MIRROR-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="0 0 ${pi}"/>
      <xacro:property name="top_mesh_path" value="package://loki_description/meshes/tower_modules/DUMMY-TOWER-MIRROR-M.stl"/>
      <xacro:property name="top_origin" value="${x} ${y} ${platform_height}" />
      <xacro:property name="top_rot" value="0 0 ${pi}"/>
      <xacro:property name="top_color" value="white"/>
    </xacro:if>

    <xacro:if value="${leg_mesh == 4}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="0 0 ${pi}"/>
      <xacro:property name="top_mesh_path" value="package://loki_description/meshes/tower_modules/DUMMY-DRIVE-BRACKET.stl"/>
      <xacro:property name="top_origin" value="${x + 0.079} ${y} ${platform_height}" />
      <xacro:property name="top_rot" value="0 0 0"/>
      <xacro:property name="top_color" value="alu"/>
    </xacro:if>

    <xacro:if value="${leg_mesh == 5}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-MIRROR-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="0 0 0"/>
      <xacro:property name="top_mesh_path" value="package://loki_description/meshes/tower_modules/DUMMY-DRIVE-BRACKET.stl"/>
      <xacro:property name="top_origin" value="${x -0.079} ${y} ${platform_height}" />
      <xacro:property name="top_rot" value="0 0 ${pi}"/>
      <xacro:property name="top_color" value="alu"/>
    </xacro:if>

    <xacro:if value="${leg_mesh == 6}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="0 0 0"/>
      <xacro:property name="top_mesh_path" value="package://loki_description/meshes/tower_modules/DUMMY-DRIVE-BRACKET.stl"/>
      <xacro:property name="top_origin" value="${x -0.079} ${y} ${platform_height}" />
      <xacro:property name="top_rot" value="0 0 ${pi}"/>
      <xacro:property name="top_color" value="alu"/>
    </xacro:if>

<xacro:if value="${leg_mesh == 7}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-MIRROR-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="0 0 ${pi}"/>
      <xacro:property name="top_mesh_path" value="package://loki_description/meshes/tower_modules/DUMMY-DRIVE-BRACKET.stl"/>
      <xacro:property name="top_origin" value="${x + 0.079} ${y} ${platform_height}" />
      <xacro:property name="top_rot" value="0 0 0"/>
      <xacro:property name="top_color" value="alu"/>
    </xacro:if>

    <xacro:if value="${leg_mesh == 8}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-MIRROR-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="${pi} ${pi / 2} 0"/>
      <xacro:property name="top_mesh_path" value=""/>
    </xacro:if>

    <xacro:if value="${leg_mesh == 9}">
      <xacro:property name="leg_mesh_path" value="package://loki_description/meshes/drive_modules/836745-5-DUMMY-RevA.stl"/>
      <xacro:property name="leg_pos" value="0 0 0"/>
      <xacro:property name="leg_rot" value="${pi} ${pi / 2} 0"/>
      <xacro:property name="top_mesh_path" value=""/>
    </xacro:if>

    <xacro:if value="${top_mesh_path != ''}">
      <link name="$(arg tf_prefix)${top}">
        <xacro:cuboid_inertial mass="10.21" length="0.265" width="0.209" height="0.42" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <mesh filename="${top_mesh_path}"/>
            <box size = "0.265 0.209 0.42"/>
          </geometry>
          <material name="${top_color}" />
        </visual>
        <collision>
          <geometry>
            <mesh filename = "${top_mesh_path}"/>
            <box size = "0.265 0.209 0.42"/>
          </geometry>
        </collision>
      </link>

      <joint name="$(arg tf_prefix)base_link${top}" type="fixed">
        <parent link="$(arg tf_prefix)base_link"/>
	      <child link="$(arg tf_prefix)${top}"/>
	      <origin xyz="${top_origin}" rpy="${top_rot}"/>
        <axis xyz="0 0 1"/>
      </joint>
    </xacro:if>

    <link name="$(arg tf_prefix)${leg}">
      <xacro:cylinder_inertial mass="15.64" length="${leg_length}" radius="${leg_radius}" xyz="0 0 0" rpy="0 0 0"/>
      <visual>
        <origin xyz="${leg_pos}" rpy="${leg_rot}"/>
        <geometry>
          <mesh filename="${leg_mesh_path}" />
          <cylinder length="${leg_length}" radius="${leg_radius}"/>
          <!--mesh filename="package://loki_base/meshes/top_chassis.dae"/-->
        </geometry>
        <material name="white" />
      </visual>
      <collision>
        <origin xyz="${leg_pos}" rpy="${leg_rot}"/>
        <geometry>
          <mesh filename="${leg_mesh_path}" />
          <cylinder length="${leg_length}" radius="${leg_radius}"/>
        </geometry>
      </collision>
    </link>
  
    <joint name="$(arg tf_prefix)${steering}" type="continuous">
      <parent link="$(arg tf_prefix)base_link"/>
      <child link="$(arg tf_prefix)${leg}"/>
      <origin xyz="${x} ${y} ${radius_wheel}" rpy="0 0 0"/>
      <axis xyz="0 0 1"/>
      <dynamics damping="100" friction="10000"/>

    </joint>
    <transmission name="${steering}_tran">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="$(arg tf_prefix)${steering}">
      	<hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="${steering}_motor">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>

    <link name="$(arg tf_prefix)${wheel}_link">
      <xacro:cylinder_inertial mass="6.00" length="${wheel_width}" radius="${radius_wheel}" xyz="0 0 0" rpy="0 0 0"/>
      <visual>
        <geometry>
          <cylinder length="${wheel_width}" radius="${radius_wheel}"/>
          <!-- <box size = "0.00001 0.00001 0.00001"/> -->
        </geometry>
        <material name="black" />
      </visual>
      <collision>
        <geometry>
          <cylinder length="${wheel_width}" radius="${radius_wheel}"/>
          <!-- <box size = "0.00001 0.00001 0.00001"/> -->
        </geometry>
      </collision>
    </link>

    <gazebo reference="$(arg tf_prefix)${wheel}_link">
      <material>Gazebo/Black</material>
      <mu1 value="2" />
      <mu2 value="2" />
    </gazebo>
    
    <joint name="$(arg tf_prefix)${wheel}" type="continuous">
      <parent link="$(arg tf_prefix)${leg}"/>
      <child link="$(arg tf_prefix)${wheel}_link"/>
      <origin xyz="0 0 0" rpy="${-pi / 2} 0 0"/>
      <axis xyz="0 0 1"/>
      <dynamics damping="100" friction="1000"/>
    </joint>

    <transmission name="${wheel}_tran">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="$(arg tf_prefix)${wheel}">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      </joint>
      <actuator name="${wheel}_motor">
        <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>

   <xacro:property name="next_drive" value="drive${current_index + 1}" />
    <xacro:if value="${next_drive in base_params['motor_drives']}">
      <xacro:make_legs current_index="${current_index + 1}" />
    </xacro:if>
  </xacro:macro>


  <!-- Caster creating macro -->
  <xacro:macro name="make_casters" params="current_index:=0">

    <xacro:property name="caster" value="caster${current_index}" />
    <xacro:if value="${caster in base_params['casters']}">
      <!--xacro:property name="drive" value="drive${current_index}" /-->
      <xacro:property name="x" value="${base_params['casters'][caster]['x']}" />
      <xacro:property name="y" value="${base_params['casters'][caster]['y']}" />
      <xacro:property name="z_top" value="${base_params['casters'][caster]['z_top']}" />
      <xacro:property name="r_wheel" value="${base_params['casters'][caster]['r_wheel']}" />
      <xacro:property name="w_wheel" value="${base_params['casters'][caster]['w_wheel']}" />
      <xacro:property name="offset" value="${base_params['casters'][caster]['offset']}" />

      <xacro:property name="caster_leg" value="caster_leg${current_index}" />
      <xacro:property name="caster_wheel" value="caster_wheel${current_index}" />
      <xacro:property name="leg_length" value="${z_top - r_wheel}" />
      <xacro:property name="z" value="${z_top - leg_length / 2}" />

      <link name="$(arg tf_prefix)${caster_leg}">
        <xacro:cylinder_inertial mass="1" length="${leg_length}" radius="${pipe_radius}" xyz="0 0 0" rpy="0 0 0" />
        <visual>
          <geometry>
            <cylinder length="${leg_length}" radius="${pipe_radius}"/>
          </geometry>
          <material name="white" />
        </visual>
        <collision>
          <geometry>
            <cylinder length="${leg_length}" radius="${pipe_radius}"/>
          </geometry>
        </collision>
      </link>
    
      <joint name="$(arg tf_prefix)${caster_leg}" type="continuous">
        <parent link="$(arg tf_prefix)base_link"/>
        <child link="$(arg tf_prefix)${caster_leg}"/>
        <origin xyz="${x} ${y} ${z}" rpy="0 0 0"/>
        <axis xyz="0 0 1"/>
      </joint>

      <link name="$(arg tf_prefix)${caster_wheel}">
        <xacro:cylinder_inertial mass="1" length="${w_wheel}" radius="${r_wheel}" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <cylinder length="${w_wheel}" radius="${r_wheel}"/>
          </geometry>
          <material name="black" />
        </visual>
        <collision>
          <geometry>
            <cylinder length="${w_wheel}" radius="${r_wheel}"/>
          </geometry>
        </collision>
      </link>

      <gazebo reference="$(arg tf_prefix)${caster_wheel}">
        <material>Gazebo/Black</material>
      </gazebo>

      <joint name="$(arg tf_prefix)${caster_wheel}" type="continuous">
        <parent link="$(arg tf_prefix)${caster_leg}"/>
        <child link="$(arg tf_prefix)${caster_wheel}"/>
      	<origin xyz="${-offset} 0 ${-leg_length / 2}" rpy="${-pi / 2} 0 0"/>
	      <axis xyz="0 0 1"/>
      </joint>

      <xacro:property name="next_caster" value="caster${current_index + 1}" />
      <xacro:if value="${next_caster in base_params['casters']}">
        <xacro:make_casters current_index="${current_index + 1}" />
      </xacro:if>
    </xacro:if>
  </xacro:macro>

  <!-- Passive wheel creating macro -->
  <xacro:macro name="make_passive_wheels" params="current_index:=0">

    <xacro:property name="passive_wheel" value="passive_wheel${current_index}" />
    <xacro:if value="${passive_wheel in base_params['passive_wheels']}">
      <!--xacro:property name="drive" value="drive${current_index}" /-->
      <xacro:property name="x" value="${base_params['passive_wheels'][passive_wheel]['x']}" />
      <xacro:property name="y" value="${base_params['passive_wheels'][passive_wheel]['y']}" />
      <xacro:property name="z_top" value="${base_params['passive_wheels'][passive_wheel]['z_top']}" />
      <xacro:property name="r_wheel" value="${base_params['passive_wheels'][passive_wheel]['r_wheel']}" />
      <xacro:property name="w_wheel" value="${base_params['passive_wheels'][passive_wheel]['w_wheel']}" />

      <xacro:property name="leg" value="passive_wheel_leg${current_index}" />
      <xacro:property name="wheel" value="passive_wheel${current_index}" />
      <xacro:property name="leg_length" value="${z_top - r_wheel}" />
      <xacro:property name="z" value="${z_top - leg_length / 2}" />

      <link name="$(arg tf_prefix)${leg}">
        <xacro:cylinder_inertial mass="1" length="${leg_length}" radius="${pipe_radius}" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <cylinder length="${leg_length}" radius="${pipe_radius}"/>
          </geometry>
          <material name="white" />
        </visual>
        <collision>
          <geometry>
            <cylinder length="${leg_length}" radius="${pipe_radius}"/>
          </geometry>
        </collision>
      </link>

      <joint name="$(arg tf_prefix)${leg}" type="fixed">
        <parent link="$(arg tf_prefix)base_link"/>
        <child link="$(arg tf_prefix)${leg}"/>
        <origin xyz="${x} ${y} ${z}" rpy="0 0 0"/>
        <axis xyz="0 0 1"/>
      </joint>

      <link name="$(arg tf_prefix)${wheel}">
        <xacro:cylinder_inertial mass="1" length="${w_wheel}" radius="${r_wheel}" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <cylinder length="${w_wheel}" radius="${r_wheel}"/>
          </geometry>
          <material name="black" />
        </visual>
        <collision>
          <geometry>
            <cylinder length="${w_wheel}" radius="${r_wheel}"/>
          </geometry>
        </collision>
      </link>

      <gazebo reference="$(arg tf_prefix)${wheel}">
        <material>Gazebo/Black</material>
      </gazebo>

      <joint name="$(arg tf_prefix)${wheel}" type="continuous">
        <parent link="$(arg tf_prefix)${leg}"/>
        <child link="$(arg tf_prefix)${wheel}"/>
      	<origin xyz="0 0 ${-leg_length / 2}" rpy="${-pi / 2} 0 0"/>
	      <axis xyz="0 0 1"/>
      </joint>

      <xacro:property name="next_passive_wheel" value="passive_wheel${current_index + 1}" />
      <xacro:if value="${next_passive_wheel in base_params['passive_wheels']}">
        <xacro:make_passive_wheels current_index="${current_index + 1}" />
      </xacro:if>
    </xacro:if>
  </xacro:macro>

 <!-- Robot frame member creating macro -->
  <xacro:macro name="make_beams" params="current_index:=0">

    <xacro:property name="beam" value="beam${current_index}" />
    <xacro:if value="${beam in base_params['beams']}">
      <!--xacro:property name="drive" value="drive${current_index}" /-->
      <xacro:property name="start" value="${base_params['beams'][beam]['start']}" />
      <xacro:property name="end" value="${base_params['beams'][beam]['end']}" />
      <xacro:property name="start_x" value="${base_params['motor_drives'][start]['x']}" />
      <xacro:property name="start_y" value="${base_params['motor_drives'][start]['y']}" />
      <xacro:property name="end_x" value="${base_params['motor_drives'][end]['x']}" />
      <xacro:property name="end_y" value="${base_params['motor_drives'][end]['y']}" />
      <xacro:property name="length" value="${sqrt((end_y - start_y)**2 + (end_x - start_x)**2)}" />
      <xacro:property name="y" value="${start_y + (end_y - start_y) / 2}" />
      <xacro:property name="x" value="${start_x + (end_x - start_x) / 2}" />

      <xacro:property name="yaw" value="${ atan2((end_y - start_y), (end_x - start_x))}" />

      <link name="$(arg tf_prefix)${beam}">
        <xacro:cuboid_inertial mass="1" length="${length}" width="${frame_beam_width}" height="${frame_beam_height}" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <box size="${frame_beam_width} ${length} ${frame_beam_height}" />
            <!-- <box size = "0.00001 0.00001 0.00001"/> -->
          </geometry>
          <material name="white" />
        </visual>
        <collision>
          <geometry>
            <box size="${frame_beam_width} ${length} ${frame_beam_height}" />
            <!-- <box size = "0.00001 0.00001 0.00001"/> -->
          </geometry>
        </collision>
      </link>
    
      <joint name="$(arg tf_prefix)${beam}_link" type="fixed">
        <parent link="$(arg tf_prefix)base_link"/>
        <child link="$(arg tf_prefix)${beam}"/>
        <origin xyz="${x} ${y} ${platform_height}" rpy="0 0 ${yaw - pi / 2}"/>
        <axis xyz="0 0 1"/>
      </joint>

      <xacro:property name="next_beam" value="beam${current_index + 1}" />
      <xacro:if value="${next_beam in base_params['beams']}">
        <xacro:make_beams current_index="${current_index + 1}" />
      </xacro:if>
    </xacro:if>
  </xacro:macro>


  <xacro:macro name="make_pipes" params="current_index:=0">

    <xacro:property name="pipe" value="pipe${current_index}" />
    <xacro:if value="${pipe in base_params['pipes']}">
      <!--xacro:property name="drive" value="drive${current_index}" /-->
      <xacro:property name="start_x" value="${base_params['pipes'][pipe]['x1']}" />
      <xacro:property name="start_y" value="${base_params['pipes'][pipe]['y1']}" />
      <xacro:property name="end_x" value="${base_params['pipes'][pipe]['x2']}" />
      <xacro:property name="end_y" value="${base_params['pipes'][pipe]['y2']}" />
      <xacro:property name="height" value="${base_params['pipes'][pipe]['height']}" />
      <xacro:property name="space" value="${base_params['pipes'][pipe]['space']}" />
      <xacro:property name="length" value="${sqrt((end_y - start_y)**2 + (end_x - start_x)**2)}" />
      <xacro:property name="y" value="${start_y + (end_y - start_y) / 2}" />
      <xacro:property name="x" value="${start_x + (end_x - start_x) / 2}" />
      <xacro:property name="yaw" value="${ atan2((end_y - start_y), (end_x - start_x))}" />

      <link name="$(arg tf_prefix)${pipe}_1">
        <xacro:cylinder_inertial mass="1" length="${length}" radius="${pipe_radius}" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <cylinder length="${length}" radius="${pipe_radius}"/>
          </geometry>
          <material name="alu" />
        </visual>
        <collision>
          <geometry>
            <cylinder length="${length}" radius="${pipe_radius}"/>
          </geometry>
        </collision>
      </link>

      <link name="$(arg tf_prefix)${pipe}_2">
        <xacro:cylinder_inertial mass="1" length="${length}" radius="${pipe_radius}" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <cylinder length="${length}" radius="${pipe_radius}"/>
          </geometry>
          <material name="alu" />
        </visual>
        <collision>
          <geometry>
            <cylinder length="${length}" radius="${pipe_radius}"/>
          </geometry>
        </collision>
      </link>
    
      <joint name="$(arg tf_prefix)${pipe}_link_1" type="fixed">
        <parent link="$(arg tf_prefix)base_link"/>
        <child link="$(arg tf_prefix)${pipe}_1"/>
        <origin xyz="${x} ${y} ${height - space / 2}" rpy="${pi / 2} 0 ${yaw - pi / 2}"/>
        <axis xyz="0 0 1"/>
      </joint>
      
      <joint name="$(arg tf_prefix)${pipe}_link_2" type="fixed">
        <parent link="$(arg tf_prefix)base_link"/>
        <child link="$(arg tf_prefix)${pipe}_2"/>
        <origin xyz="${x} ${y} ${height + space / 2}" rpy="${pi / 2} 0 ${yaw - pi / 2}"/>
        <axis xyz="0 0 1"/>
      </joint>

      <xacro:property name="next_pipe" value="pipe${current_index + 1}" />
      <xacro:if value="${next_pipe in base_params['pipes']}">
        <xacro:make_pipes current_index="${current_index + 1}" />
      </xacro:if>
    </xacro:if>
  </xacro:macro>

  <xacro:macro name="make_corners" params="current_index:=0">

    <xacro:property name="corner" value="corner${current_index}" />
    <xacro:if value="${corner in base_params['corners']}">
      <!--xacro:property name="drive" value="drive${current_index}" /-->
      <xacro:property name="x" value="${base_params['corners'][corner]['x']}" />
      <xacro:property name="y" value="${base_params['corners'][corner]['y']}" />
      <xacro:property name="z" value="${base_params['corners'][corner]['z']}" />
      <xacro:property name="space" value="${base_params['corners'][corner]['space']}" />
      <xacro:property name="type" value="${base_params['corners'][corner]['type']}" />
      <xacro:property name="corner_mesh" value="${base_params['corners'][corner]['corner_mesh']}" />
      <xacro:property name="susp_ang" value="0" />
      <xacro:if value="${'susp_ang' in base_params['corners'][corner]}">
        <xacro:property name="susp_ang" value="${base_params['corners'][corner]['susp_ang']}" />
      </xacro:if>

      <link name="$(arg tf_prefix)${corner}_1">
        <xacro:cuboid_inertial mass="0.915" length="0.140" width="0.116" height="0.058" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <mesh filename="package://loki_description/meshes/clamps/DUMMY-T-BRACKET.stl" />
            <box size = "0.140 0.116 0.058"/>
          </geometry>
          <material name="alu" />
        </visual>
        <collision>
          <geometry>
            <box size = "0.140 0.116 0.058"/>
          </geometry>
        </collision>
      </link>
      <link name="$(arg tf_prefix)${corner}_2">
        <xacro:cuboid_inertial mass="0.915" length="0.140" width="0.116" height="0.058" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <mesh filename="package://loki_description/meshes/clamps/DUMMY-T-BRACKET.stl" />
            <box size = "0.140 0.116 0.058"/>
          </geometry>
          <material name="alu" />
        </visual>
        <collision>
          <geometry>
            <box size = "0.140 0.116 0.058"/>
          </geometry>
        </collision>
      </link>
      <link name="$(arg tf_prefix)${corner}">
        <xacro:cylinder_inertial mass="0.915" length="${space}" radius="${pipe_radius}" xyz="0 0 0" rpy="0 0 0"/>
        <visual>
          <geometry>
            <cylinder length="${space}" radius="${pipe_radius}"/>
            <!-- <box size = "0.00001 0.00001 0.00001" /> -->
          </geometry>
          <material name="alu" />
        </visual>
        <collision>
          <geometry>
            <cylinder length="${space}" radius="${pipe_radius}"/>
          </geometry>
        </collision>
      </link>

    
      <joint name="$(arg tf_prefix)${corner}_link_1" type="fixed">
        <parent link="$(arg tf_prefix)${corner}"/>
        <child link="$(arg tf_prefix)${corner}_1"/>
        <origin xyz="0.057 0 ${-space / 2}" rpy="0 0 0"/>
        <axis xyz="0 0 1"/>
      </joint>
      <joint name="$(arg tf_prefix)${corner}_link_2" type="fixed">
        <parent link="$(arg tf_prefix)${corner}"/>
        <child link="$(arg tf_prefix)${corner}_2"/>
        <origin xyz="0.057 0 ${space / 2}" rpy="0 0 0"/>
        <axis xyz="0 0 1"/>
      </joint>

      <xacro:if value="${corner_mesh == 1}">

        <link name="$(arg tf_prefix)${corner}_3">
          <xacro:cuboid_inertial mass="0.915" length="0.155" width="0.138" height="0.025" xyz="0 0 0" rpy="0 0 0"/>
          <visual>
            <geometry>
              <mesh filename="package://loki_description/meshes/clamps/DUMMY-SUSP.stl" />
              <box size = "0.155 0.138 0.025"/>
            </geometry>
            <material name="alu" />
          </visual>
          <collision>
            <geometry>
              <box size = "0.155 0.138 0.025"/>
            </geometry>
          </collision>
        </link>
        <link name="$(arg tf_prefix)${corner}_4">
          <xacro:cuboid_inertial mass="0.915" length="0.155" width="0.138" height="0.025" xyz="0 0 0" rpy="0 0 0"/>
          <visual>
            <geometry>
              <mesh filename="package://loki_description/meshes/clamps/DUMMY-SUSP.stl" />
              <box size = "0.155 0.138 0.025"/>
            </geometry>
            <material name="alu" />
          </visual>
          <collision>
            <geometry>
              <box size = "0.155 0.138 0.025"/>
            </geometry>
          </collision>
        </link>

        <joint name="$(arg tf_prefix)${corner}_link_3" type="fixed">
          <parent link="$(arg tf_prefix)${corner}"/>
          <child link="$(arg tf_prefix)${corner}_3"/>
	        <origin xyz="${0.043 + 0.057} 0 ${-space / 2}" rpy="0 ${susp_ang} 0"/>
          <axis xyz="0 0 1"/>
        </joint>
        <joint name="$(arg tf_prefix)${corner}_link_4" type="fixed">
          <parent link="$(arg tf_prefix)${corner}"/>
          <child link="$(arg tf_prefix)${corner}_4"/>
	        <origin xyz="${0.043 + 0.057} 0 ${space / 2}" rpy="0 ${susp_ang} 0"/>
          <axis xyz="0 0 1"/>
        </joint>

      </xacro:if>

      <xacro:property name="yaw" value="0" />
      <xacro:property name="dx" value="0" />

      <xacro:if value="${type == 0}">
        <xacro:property name="yaw" value="${- pi}" />
        <xacro:property name="dx" value="0.057" />
      </xacro:if>

      <xacro:if value="${type == 1}">
        <xacro:property name="yaw" value="0" />
        <xacro:property name="dx" value="-0.057" />
      </xacro:if>

      <xacro:if value="${type == 2}">
        <xacro:property name="yaw" value="0" />
        <xacro:property name="dx" value="-0.057" />
      </xacro:if>

      <xacro:if value="${type == 3}">
        <xacro:property name="yaw" value="${- pi}" />
        <xacro:property name="dx" value="0.057" />
      </xacro:if>

      <joint name="$(arg tf_prefix)${corner}_link" type="fixed">
        <parent link="$(arg tf_prefix)base_link"/>
        <child link="$(arg tf_prefix)${corner}"/>
      	<origin xyz="${x + dx} ${y} ${z}" rpy="0 0 ${yaw}"/>
        <axis xyz="0 0 1"/>
      </joint>


      <xacro:property name="next_corner" value="corner${current_index + 1}" />
      <xacro:if value="${next_corner in base_params['corners']}">
        <xacro:make_corners current_index="${current_index + 1}" />
      </xacro:if>
    </xacro:if>
  </xacro:macro>

  <!-- Battery creating macro -->
  <xacro:macro name="make_batteries" params="current_index:=0">
    <xacro:property name="bat" value="bat${current_index}" />
    <xacro:if value="${bat in base_params['batteries']}">

      <xacro:property name="x" value="${base_params['batteries'][bat]['x']}" />
      <xacro:property name="y" value="${base_params['batteries'][bat]['y']}" />
      <xacro:property name="bat_z" value="${base_params['batteries'][bat]['z']}" />
      <xacro:property name="yaw" value="${base_params['batteries'][bat]['yaw']}" />
      <xacro:property name="bat_mesh" value="${base_params['batteries'][bat]['bat_mesh']}" />
      <!--xacro:property name="bat_z" value="${platform_height + battery_dz}" /-->
      <xacro:property name="bat_mesh_path" value="" />
      <xacro:property name="with_battery" value="0" />
      <xacro:property name="yaw_offset" value="0" />

      <xacro:if value="${bat_mesh == 0}">
        <xacro:property name="x_bat" value="${x - battery_dxy * sin(yaw) }" />
        <xacro:property name="y_bat" value="${y + battery_dxy * cos(yaw) }" />
        <xacro:property name="bat_mesh_path" value="package://loki_description/meshes/bat_enc_modules/836586-1-DUMMY-RevA.stl"/>
        <xacro:property name="yaw_offset" value="${pi}" />
      </xacro:if>
      <xacro:if value="${bat_mesh == 1}">
        <xacro:property name="x_bat" value="${x + battery_dxy * sin(yaw) }" />
        <xacro:property name="y_bat" value="${y - battery_dxy * cos(yaw) }" />
        <xacro:property name="bat_mesh_path" value="package://loki_description/meshes/bat_enc_modules/836586-1-DUMMY-RevA.stl"/>
        <xacro:property name="yaw_offset" value="0" />
      </xacro:if>


      <xacro:if value="${bat_mesh_path == '' and with_battery==0}">
        <link name="$(arg tf_prefix)${bat}">
          <xacro:cuboid_inertial mass="12.88" length="${battery_length}" width="${battery_width}" height="${battery_height}" xyz="0 0 0" rpy="0 0 0"/>
          <visual>
            <geometry>
              <box size="${battery_length} ${battery_width} ${battery_height}" />
            </geometry>
            <material name="white" />
          </visual>
          <collision>
            <geometry>
              <box size="${battery_length} ${battery_width} ${battery_height}" />
            </geometry>
          </collision>
        </link>

      </xacro:if>

      <xacro:if value="${bat_mesh_path == '' and with_battery==1}">
        <link name="$(arg tf_prefix)${bat}">
          <xacro:cuboid_inertial mass="36.88" length="${battery_length}" width="${battery_width}" height="${battery_height}" xyz="0 0 0" rpy="0 0 0"/>
          <visual>
            <geometry>
              <box size="${battery_length} ${battery_width} ${battery_height}" />
            </geometry>
            <material name="white" />
          </visual>
          <collision>
            <geometry>
              <box size="${battery_length} ${battery_width} ${battery_height}" />
            </geometry>
          </collision>
        </link>
      </xacro:if>

      <xacro:if value="${bat_mesh_path != '' and with_battery==0}">
        <link name="$(arg tf_prefix)${bat}">
          <xacro:cuboid_inertial mass="12.88" length="0.530" width="0.245" height="0.509" xyz="0 0 -0.25" rpy="0 0 0"/>
          <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
              <mesh filename="${bat_mesh_path}"/>
              <box size = "0.530 0.245 0.509" />
            </geometry>
            <material name="white" />
          </visual>
          <collision>
            <geometry>
              <mesh filename="${bat_mesh_path}"/>
              <box size = "0.530 0.245 0.509" />
            </geometry>
          </collision>
        </link>
      </xacro:if>

      <xacro:if value="${bat_mesh_path != '' and with_battery==1}">
        <link name="$(arg tf_prefix)${bat}">
          <xacro:cuboid_inertial mass="36.88" length="0.530" width="0.245" height="0.509" xyz="0 0 -0.25" rpy="0 0 0"/>
          <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
              <mesh filename="${bat_mesh_path}"/>
              <box size = "0.530 0.245 0.509"/>
            </geometry>
            <material name="white" />
          </visual>
          <collision>
            <geometry>
              <mesh filename="${bat_mesh_path}"/>
              <box size = "0.530 0.245 0.509"/>
            </geometry>
          </collision>
        </link>
      </xacro:if>

      <joint name="$(arg tf_prefix)${bat}_joint" type="fixed">
        <parent link="$(arg tf_prefix)base_link"/>
        <child link="$(arg tf_prefix)${bat}"/>
        <origin xyz="${x_bat} ${y_bat} ${bat_z}" rpy="0 0 ${yaw + yaw_offset}"/>
        <axis xyz="0 0 1"/>
      </joint>

      <xacro:property name="next_bat" value="bat${current_index + 1}" />
      <xacro:if value="${next_bat in base_params['batteries']}">
        <xacro:make_batteries current_index="${current_index + 1}" />
      </xacro:if>
    </xacro:if>
  </xacro:macro>

  <!-- CREATE ROBOT -->

  <!-- Create base link -->
  <link name="$(arg tf_prefix)base_link" />

  <!-- Create legs -->
  <xacro:if value="${'motor_drives' in base_params}">
    <xacro:make_legs />
  </xacro:if>

  <!-- Create casters -->
  <xacro:if value="${'casters' in base_params}">
    <xacro:make_casters />
  </xacro:if>

  <!-- Create passive support wheels -->
  <xacro:if value="${'passive_wheels' in base_params}">
    <xacro:make_passive_wheels />
  </xacro:if>

  <!-- Create beams -->
  <xacro:if value="${'beams' in base_params}">
    <xacro:make_beams />
  </xacro:if>

  <!-- Create beams -->
  <xacro:if value="${'corners' in base_params}">
    <xacro:make_corners />
  </xacro:if>

  <!-- Create pipes -->
  <xacro:if value="${'pipes' in base_params}">
    <xacro:make_pipes />
  </xacro:if>

  <!-- Create batteries -->
  <xacro:if value="${'batteries' in base_params}">
    <xacro:make_batteries />
  </xacro:if>

  <!-- Create extras -->
  <xacro:if value="${model_extras != ''}">
    <xacro:include filename="${model_extras}">
      <xacro:arg name="robot_name" value="${robot_name}" />
      <xacro:arg name="tf_prefix" value="${tf_prefix}" />
    </xacro:include>
  </xacro:if>

</robot> 


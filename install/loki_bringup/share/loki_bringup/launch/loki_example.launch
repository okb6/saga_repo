<?xml version="1.0" ?>

<launch>

  <!-- This file provides an example for launching a Thorvald robot.
       Copy this file, together with any config files you wish to edit, to your own package before editing. -->


  <!-- Robot name and tf prefix -->
  <arg name="robot_name" default="" />
  <arg name="tf_prefix" default="" />

  <!--Â Path to tobot configuration file
       This file list modules on a given robot with key parameters like position in the base_link frame, gear ratios, etc.
       The robot description is then automatically generated from this file.
       Many examples are found in the thorvald_description package -->
  <arg name="robot_model" default="$(find-pkg-share loki_base)/config/robot_017.yaml" />

  <!-- Path to model extras xacro file
       This file is used to define any mesh or tfs that are not automatically generated from the robot configuration file
       Examples include sensors and custom frame members
       Leave empty if no additional tfs or meshers are required -->
  <!-- <arg name="model_extras" default="$(find-pkg-share loki_description)/urdf/sensor_modules/sensor_frames_example.xacro" /> -->

  <!-- Simulated or real robot.
       If set to True, the base driver node will simulate motor feedback. -->
  <arg name="simple_sim" default="True" />

  <!-- CAN interface.
       If you are running a real robot, you need to set the CAN interface exec and name
       For robots fitted with the Main Enc. PCB (v1) REV6 can interface exec is "enc_pcb_v1rev6" and name is the port
       For robots fitted with PCAN-USB adapters (or another socketcan device), interface exec is "socketcan" and name is the socketcan interface
       Remember to uninstall old PCAN drivers or else it will not work with socketcan. -->
  <!--arg name="can_interface_type" default="enc_pcb_v2rev1" /-->
  <!--arg name="can_interface_name" default="/dev/ttyACM0" /-->
  <arg name="can_interface_type" default="socketcan" />
  <arg name="can_interface_name" default="can0" />

  <!-- Base odometry frame args
       If enable_odom_tf is true, the base driver node will broadcast a transform between the odometry frame and the base_link frame
       odom_frame_id sets the name of the odometry frame used in tf broadcast and odometry topic. -->
  <arg name="enable_odom_tf" default="True" />
  <arg name="odom_frame_id" default="odom" />

  <!-- Twist mux args
       twist and lock topics to be used by twist_mux, command multiplexer -->
  <let name="twist_mux_topics" value="$(find-pkg-share loki_twist_mux)/config/twist_mux_topics.yaml" />
  <let name="twist_mux_locks" value="$(find-pkg-share loki_twist_mux)/config/twist_mux_locks.yaml" />

  <!-- Teleop args
       The teleop node can be used with different hardware, and can also be configured to call any number of std_srvs/Trigger services.
       You can use xbox.yaml from thorvald_teleop as an example when configuring your own controller -->
  <arg name="joy_dev" default="/dev/input/js0" />
  <let name="joy_autorepeat_rate" value="20.0" />
  <let name="joy_deadzone" value="0.2" />
  <let name="teleop_controller" value="$(find-pkg-share loki_teleop)/config/xbox.yaml" />





  <!-- loki bringup -->
  <include file="$(find-pkg-share loki_bringup)/launch/loki_bringup.launch">
    <let name="robot_name" value="$(var robot_name)" />
    <let name="tf_prefix" value="$(var tf_prefix)" />
    <let name="robot_model" value="$(var robot_model)" />
    <let name="model_extras" value="$(var model_extras)" />
    <let name="simple_sim" value="$(var simple_sim)" />
    <arg name="enable_odom_tf" default="$(var enable_odom_tf)" />
    <let name="odom_frame_id" value="$(var odom_frame_id)" />
    <let name="can_interface_type" value="$(var can_interface_type)" />
    <let name="can_interface_name" value="$(var can_interface_name)" />
  </include>


  <!-- Twist mux bringup -->
  <include file="$(find-pkg-share loki_twist_mux)/launch/twist_mux.launch">
    <let name="config_topics" value="$(var twist_mux_topics)" />
    <let name="config_locks" value="$(var twist_mux_locks)" />
  </include>


  <!-- Teleop bringup -->
  <include file="$(find-pkg-share loki_teleop)/launch/teleop.launch">
    <let name="joy_dev" value="$(var joy_dev)" />
    <let name="joy_autorepeat_rate" value="$(var joy_autorepeat_rate)" />
    <let name="joy_deadzone" value="$(var joy_deadzone)" />
    <let name="teleop_controller" value="$(var teleop_controller)" />
  </include>



</launch>

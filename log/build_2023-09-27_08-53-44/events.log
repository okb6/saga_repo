[0.000000] (-) TimerEvent: {}
[0.000086] (-) JobUnselected: {'identifier': 'actionlib_msgs'}
[0.000338] (-) JobUnselected: {'identifier': 'common_interfaces'}
[0.000356] (-) JobUnselected: {'identifier': 'diagnostic_aggregator'}
[0.000370] (-) JobUnselected: {'identifier': 'diagnostic_common_diagnostics'}
[0.000383] (-) JobUnselected: {'identifier': 'diagnostic_msgs'}
[0.000421] (-) JobUnselected: {'identifier': 'diagnostic_updater'}
[0.000436] (-) JobUnselected: {'identifier': 'diagnostics'}
[0.000460] (-) JobUnselected: {'identifier': 'geometry_msgs'}
[0.000475] (-) JobUnselected: {'identifier': 'loki_base'}
[0.000489] (-) JobUnselected: {'identifier': 'loki_bringup'}
[0.000642] (-) JobUnselected: {'identifier': 'loki_description'}
[0.000988] (-) JobUnselected: {'identifier': 'loki_msgs'}
[0.001020] (-) JobUnselected: {'identifier': 'loki_simulator'}
[0.001037] (-) JobUnselected: {'identifier': 'loki_teleop'}
[0.001058] (-) JobUnselected: {'identifier': 'loki_twist_mux'}
[0.001078] (-) JobUnselected: {'identifier': 'nav_msgs'}
[0.001093] (-) JobUnselected: {'identifier': 'rasberry_gazebo'}
[0.001140] (-) JobUnselected: {'identifier': 'robot_bringup'}
[0.001177] (-) JobUnselected: {'identifier': 'self_test'}
[0.001207] (-) JobUnselected: {'identifier': 'sensor_msgs'}
[0.001223] (-) JobUnselected: {'identifier': 'sensor_msgs_py'}
[0.001253] (-) JobUnselected: {'identifier': 'shape_msgs'}
[0.001269] (-) JobUnselected: {'identifier': 'std_msgs'}
[0.001282] (-) JobUnselected: {'identifier': 'std_srvs'}
[0.001315] (-) JobUnselected: {'identifier': 'stereo_msgs'}
[0.001378] (-) JobUnselected: {'identifier': 'trajectory_msgs'}
[0.001415] (-) JobUnselected: {'identifier': 'twist_mux'}
[0.001429] (-) JobUnselected: {'identifier': 'visualization_msgs'}
[0.001458] (loki_can_devices) JobQueued: {'identifier': 'loki_can_devices', 'dependencies': OrderedDict([('loki_description', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_description'), ('std_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs'), ('std_srvs', '/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs'), ('geometry_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs'), ('diagnostic_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs'), ('nav_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs'), ('sensor_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs'), ('loki_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs')])}
[0.001488] (loki_can_devices) JobStarted: {'identifier': 'loki_can_devices'}
[0.021884] (loki_can_devices) JobProgress: {'identifier': 'loki_can_devices', 'progress': 'cmake'}
[0.022390] (loki_can_devices) JobProgress: {'identifier': 'loki_can_devices', 'progress': 'build'}
[0.022918] (loki_can_devices) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices', '--', '-j12', '-l12'], 'cwd': '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'cairlab'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/cairlab'), ('OLDPWD', '/home/cairlab/Documents/GitHub'), ('DESKTOP_SESSION', 'ubuntu'), ('GIO_LAUNCHED_DESKTOP_FILE', '/usr/share/applications/terminator.desktop'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('MANAGERPID', '1992'), ('SYSTEMD_EXEC_PID', '2238'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('TERMINATOR_DBUS_NAME', 'net.tenshu.Terminator25ef4b219e3b005583550f2b0f9f990c3'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '103452'), ('_colcon_cd_root', '/opt/ros/humble/'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'cairlab'), ('JOURNAL_STREAM', '8:36975'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'cairlab'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/home/cairlab/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/cairlab-System-Product-Name:@/tmp/.ICE-unix/2220,unix/cairlab-System-Product-Name:/tmp/.ICE-unix/2220'), ('INVOCATION_ID', '08a88d45d3914d3abb0ca4a448770a9e'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('TERMINATOR_DBUS_PATH', '/net/tenshu/Terminator2'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('IBUS_DISABLE_SNOOPER', '1'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.HCXBB2'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/loki_description:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('TERMINATOR_UUID', 'urn:uuid:8b527116-d356-4eb3-8288-5599c02159b2'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/loki_description:/opt/ros/humble')]), 'shell': False}
[0.046167] (loki_can_devices) StdoutLine: {'line': b'-- Found ament_cmake: 1.3.5 (/opt/ros/humble/share/ament_cmake/cmake)\n'}
[0.099523] (-) TimerEvent: {}
[0.168004] (loki_can_devices) StdoutLine: {'line': b'-- Found rclcpp: 16.0.5 (/opt/ros/humble/share/rclcpp/cmake)\n'}
[0.193479] (loki_can_devices) StdoutLine: {'line': b'-- Found rosidl_generator_c: 3.1.5 (/opt/ros/humble/share/rosidl_generator_c/cmake)\n'}
[0.195539] (loki_can_devices) StdoutLine: {'line': b'-- Found rosidl_adapter: 3.1.5 (/opt/ros/humble/share/rosidl_adapter/cmake)\n'}
[0.199592] (-) TimerEvent: {}
[0.200606] (loki_can_devices) StdoutLine: {'line': b'-- Found rosidl_generator_cpp: 3.1.5 (/opt/ros/humble/share/rosidl_generator_cpp/cmake)\n'}
[0.210164] (loki_can_devices) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c\n'}
[0.223386] (loki_can_devices) StdoutLine: {'line': b'-- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp\n'}
[0.273839] (loki_can_devices) StdoutLine: {'line': b'-- Found rmw_implementation_cmake: 6.1.1 (/opt/ros/humble/share/rmw_implementation_cmake/cmake)\n'}
[0.275083] (loki_can_devices) StdoutLine: {'line': b'-- Found rmw_fastrtps_cpp: 6.2.3 (/opt/ros/humble/share/rmw_fastrtps_cpp/cmake)\n'}
[0.299687] (-) TimerEvent: {}
[0.381361] (loki_can_devices) StdoutLine: {'line': b"-- Using RMW implementation 'rmw_fastrtps_cpp' as default\n"}
[0.399786] (-) TimerEvent: {}
[0.500003] (-) TimerEvent: {}
[0.528158] (loki_can_devices) StdoutLine: {'line': b'-- Found angles: 1.15.0 (/opt/ros/humble/share/angles/cmake)\n'}
[0.529204] (loki_can_devices) StdoutLine: {'line': b'-- Found geometry_msgs: 5.2.0 (/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs/share/geometry_msgs/cmake)\n'}
[0.567570] (loki_can_devices) StdoutLine: {'line': b'-- Found loki_msgs: 2.0.0 (/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs/share/loki_msgs/cmake)\n'}
[0.600067] (-) TimerEvent: {}
[0.700269] (-) TimerEvent: {}
[0.800519] (-) TimerEvent: {}
[0.823619] (loki_can_devices) StdoutLine: {'line': b'-- Configuring done\n'}
[0.837800] (loki_can_devices) StdoutLine: {'line': b'-- Generating done\n'}
[0.839109] (loki_can_devices) StdoutLine: {'line': b'-- Build files have been written to: /home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices\n'}
[0.866118] (loki_can_devices) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target can\x1b[0m\n'}
[0.900627] (-) TimerEvent: {}
[0.905332] (loki_can_devices) StdoutLine: {'line': b'[ 81%] Built target can\n'}
[0.923579] (loki_can_devices) StdoutLine: {'line': b'[ 90%] \x1b[32mBuilding CXX object CMakeFiles/pytocpp.dir/src/py_to_cpp.cpp.o\x1b[0m\n'}
[1.000745] (-) TimerEvent: {}
[1.100992] (-) TimerEvent: {}
[1.201256] (-) TimerEvent: {}
[1.301499] (-) TimerEvent: {}
[1.401760] (-) TimerEvent: {}
[1.502038] (-) TimerEvent: {}
[1.602300] (-) TimerEvent: {}
[1.702560] (-) TimerEvent: {}
[1.802820] (-) TimerEvent: {}
[1.903114] (-) TimerEvent: {}
[2.003386] (-) TimerEvent: {}
[2.103678] (-) TimerEvent: {}
[2.203960] (-) TimerEvent: {}
[2.304226] (-) TimerEvent: {}
[2.404493] (-) TimerEvent: {}
[2.504772] (-) TimerEvent: {}
[2.605046] (-) TimerEvent: {}
[2.705320] (-) TimerEvent: {}
[2.805584] (-) TimerEvent: {}
[2.905843] (-) TimerEvent: {}
[3.006104] (-) TimerEvent: {}
[3.106369] (-) TimerEvent: {}
[3.206627] (-) TimerEvent: {}
[3.306890] (-) TimerEvent: {}
[3.407153] (-) TimerEvent: {}
[3.507435] (-) TimerEvent: {}
[3.607915] (-) TimerEvent: {}
[3.708197] (-) TimerEvent: {}
[3.808460] (-) TimerEvent: {}
[3.908694] (-) TimerEvent: {}
[4.009011] (-) TimerEvent: {}
[4.109371] (-) TimerEvent: {}
[4.209623] (-) TimerEvent: {}
[4.309883] (-) TimerEvent: {}
[4.410158] (-) TimerEvent: {}
[4.507811] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[KPyToCpp::PyToCpp()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.508042] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:60:98:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kserver_device_cmds\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[KPyToCpp\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.508162] (loki_can_devices) StderrLine: {'line': b'   60 | ki_msgs::srv::DeviceCmds>("devicecmds", std::bind(&PyToCpp::\x1b[01;31m\x1b[Kserver_device_cmds\x1b[m\x1b[K, this, std::placeholders::_1, std::placeholders::_2));\n'}
[4.508268] (loki_can_devices) StderrLine: {'line': b'      |                                                             \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.508370] (loki_can_devices) StderrLine: {'line': b'\n'}
[4.510255] (-) TimerEvent: {}
[4.610468] (-) TimerEvent: {}
[4.710749] (-) TimerEvent: {}
[4.811075] (-) TimerEvent: {}
[4.911325] (-) TimerEvent: {}
[5.011585] (-) TimerEvent: {}
[5.111834] (-) TimerEvent: {}
[5.212142] (-) TimerEvent: {}
[5.224005] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/service.hpp:36\x1b[m\x1b[K,\n'}
[5.224377] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:28\x1b[m\x1b[K,\n'}
[5.224471] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[5.224707] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[5.224780] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[5.224834] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[5.224884] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[5.224933] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[5.224982] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[5.225030] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[5.225090] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.225139] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.225193] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.225256] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.225319] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:66:62:\x1b[m\x1b[K   required from here\n'}
[5.225369] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99)\n'}
[5.225429] (loki_can_devices) StderrLine: {'line': b'  103 |       \x1b[01;31m\x1b[Kcallback_ = std::forward<CallbackT>(callback)\x1b[m\x1b[K;\n'}
[5.225477] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.225524] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[5.225572] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[5.225620] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[5.225668] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[5.225715] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[5.225762] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[5.225809] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[5.225856] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[5.225904] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[5.225951] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[5.225998] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.226046] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.226111] (loki_can_devices) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[5.226159] (loki_can_devices) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.226211] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[5.226263] (loki_can_devices) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.226324] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.226419] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.226472] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.226530] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.226663] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:66:62:\x1b[m\x1b[K   required from here\n'}
[5.226718] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.226768] (loki_can_devices) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[5.226815] (loki_can_devices) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.226861] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.226913] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.226965] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.227022] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:66:62:\x1b[m\x1b[K   required from here\n'}
[5.227075] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.227131] (loki_can_devices) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[5.227179] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.227226] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.227285] (loki_can_devices) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[5.227332] (loki_can_devices) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.227379] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.227432] (loki_can_devices) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[5.227484] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.227530] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.227592] (loki_can_devices) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[5.227640] (loki_can_devices) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[5.312264] (-) TimerEvent: {}
[5.412528] (-) TimerEvent: {}
[5.512791] (-) TimerEvent: {}
[5.613053] (-) TimerEvent: {}
[5.700091] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[5.700241] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[5.700653] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[5.700727] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[5.700781] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[5.700832] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[5.700881] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[5.700930] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[5.700988] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[5.701037] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[5.701085] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.701134] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.701193] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.701249] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.701318] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.701382] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.701443] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:81:67:\x1b[m\x1b[K   required from here\n'}
[5.701492] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>::function(std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.701542] (loki_can_devices) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[5.701591] (loki_can_devices) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.701638] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/future:47\x1b[m\x1b[K,\n'}
[5.701686] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18\x1b[m\x1b[K,\n'}
[5.701734] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[5.701781] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.701829] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.701885] (loki_can_devices) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[5.701933] (loki_can_devices) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.701980] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[5.702028] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/move.h:57\x1b[m\x1b[K,\n'}
[5.702075] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_pair.h:59\x1b[m\x1b[K,\n'}
[5.702123] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_algobase.h:64\x1b[m\x1b[K,\n'}
[5.702171] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/memory:63\x1b[m\x1b[K,\n'}
[5.702223] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[5.702271] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.702322] (loki_can_devices) StderrLine: {'line': b'/usr/include/c++/11/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.702375] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:353:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>::_Callable<std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>&, std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>, std::__invoke_result<std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>&, const loki_msgs::msg::BaseState_<std::allocator<void> >&> >; _Tp = void; _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.702434] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:434:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.702484] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.702539] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.702605] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.702666] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.702723] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:81:67:\x1b[m\x1b[K   required from here\n'}
[5.702770] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/type_traits:2205:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.702819] (loki_can_devices) StderrLine: {'line': b' 2205 |     using \x1b[01;31m\x1b[K__enable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[5.702865] (loki_can_devices) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.702912] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/future:47\x1b[m\x1b[K,\n'}
[5.702959] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18\x1b[m\x1b[K,\n'}
[5.703006] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[5.703059] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.703106] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.703157] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.703218] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.703280] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.703338] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.703396] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:81:67:\x1b[m\x1b[K   required from here\n'}
[5.703444] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.703498] (loki_can_devices) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[5.703545] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.703592] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.703642] (loki_can_devices) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[5.703689] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[5.703736] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.703789] (loki_can_devices) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[5.703836] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.703924] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.703993] (loki_can_devices) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[5.704039] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[5.704085] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.704133] (loki_can_devices) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[5.704179] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.704225] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.704273] (loki_can_devices) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[5.704319] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[5.704364] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.704412] (loki_can_devices) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[5.704458] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.704504] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[5.713156] (-) TimerEvent: {}
[5.813398] (-) TimerEvent: {}
[5.913678] (-) TimerEvent: {}
[6.014000] (-) TimerEvent: {}
[6.114289] (-) TimerEvent: {}
[6.214568] (-) TimerEvent: {}
[6.314836] (-) TimerEvent: {}
[6.415114] (-) TimerEvent: {}
[6.515394] (-) TimerEvent: {}
[6.615680] (-) TimerEvent: {}
[6.715971] (-) TimerEvent: {}
[6.816233] (-) TimerEvent: {}
[6.916496] (-) TimerEvent: {}
[7.016778] (-) TimerEvent: {}
[7.117079] (-) TimerEvent: {}
[7.217377] (-) TimerEvent: {}
[7.317638] (-) TimerEvent: {}
[7.417913] (-) TimerEvent: {}
[7.518172] (-) TimerEvent: {}
[7.618450] (-) TimerEvent: {}
[7.718712] (-) TimerEvent: {}
[7.818973] (-) TimerEvent: {}
[7.919253] (-) TimerEvent: {}
[8.019557] (-) TimerEvent: {}
[8.119818] (-) TimerEvent: {}
[8.220123] (-) TimerEvent: {}
[8.320380] (-) TimerEvent: {}
[8.420658] (-) TimerEvent: {}
[8.520937] (-) TimerEvent: {}
[8.621217] (-) TimerEvent: {}
[8.721477] (-) TimerEvent: {}
[8.821738] (-) TimerEvent: {}
[8.922001] (-) TimerEvent: {}
[9.022264] (-) TimerEvent: {}
[9.122529] (-) TimerEvent: {}
[9.222817] (-) TimerEvent: {}
[9.292089] (loki_can_devices) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/pytocpp.dir/build.make:76: CMakeFiles/pytocpp.dir/src/py_to_cpp.cpp.o] Error 1\n'}
[9.292324] (loki_can_devices) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:165: CMakeFiles/pytocpp.dir/all] Error 2\n'}
[9.292563] (loki_can_devices) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[9.294296] (loki_can_devices) CommandEnded: {'returncode': 2}
[9.322990] (-) TimerEvent: {}
[9.339222] (loki_can_devices) JobEnded: {'identifier': 'loki_can_devices', 'rc': 2}
[9.349666] (-) EventReactorShutdown: {}

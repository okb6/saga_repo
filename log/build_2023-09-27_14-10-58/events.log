[0.000000] (-) TimerEvent: {}
[0.000568] (-) JobUnselected: {'identifier': 'actionlib_msgs'}
[0.000631] (-) JobUnselected: {'identifier': 'common_interfaces'}
[0.000689] (-) JobUnselected: {'identifier': 'diagnostic_aggregator'}
[0.000835] (-) JobUnselected: {'identifier': 'diagnostic_common_diagnostics'}
[0.000874] (-) JobUnselected: {'identifier': 'diagnostic_msgs'}
[0.000893] (-) JobUnselected: {'identifier': 'diagnostic_updater'}
[0.000909] (-) JobUnselected: {'identifier': 'diagnostics'}
[0.000929] (-) JobUnselected: {'identifier': 'geometry_msgs'}
[0.001002] (-) JobUnselected: {'identifier': 'loki_base'}
[0.001031] (-) JobUnselected: {'identifier': 'loki_bringup'}
[0.001050] (-) JobUnselected: {'identifier': 'loki_description'}
[0.001070] (-) JobUnselected: {'identifier': 'loki_msgs'}
[0.001084] (-) JobUnselected: {'identifier': 'loki_simulator'}
[0.001129] (-) JobUnselected: {'identifier': 'loki_teleop'}
[0.001165] (-) JobUnselected: {'identifier': 'loki_twist_mux'}
[0.001181] (-) JobUnselected: {'identifier': 'nav_msgs'}
[0.001197] (-) JobUnselected: {'identifier': 'rasberry_gazebo'}
[0.001216] (-) JobUnselected: {'identifier': 'robot_bringup'}
[0.001273] (-) JobUnselected: {'identifier': 'self_test'}
[0.001290] (-) JobUnselected: {'identifier': 'sensor_msgs'}
[0.001319] (-) JobUnselected: {'identifier': 'sensor_msgs_py'}
[0.001338] (-) JobUnselected: {'identifier': 'shape_msgs'}
[0.001358] (-) JobUnselected: {'identifier': 'std_msgs'}
[0.001374] (-) JobUnselected: {'identifier': 'std_srvs'}
[0.001395] (-) JobUnselected: {'identifier': 'stereo_msgs'}
[0.001724] (-) JobUnselected: {'identifier': 'trajectory_msgs'}
[0.001789] (-) JobUnselected: {'identifier': 'twist_mux'}
[0.001805] (-) JobUnselected: {'identifier': 'visualization_msgs'}
[0.001829] (loki_can_devices) JobQueued: {'identifier': 'loki_can_devices', 'dependencies': OrderedDict([('loki_description', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_description'), ('std_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs'), ('std_srvs', '/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs'), ('geometry_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs'), ('diagnostic_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs'), ('nav_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs'), ('sensor_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs'), ('loki_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs')])}
[0.001887] (loki_can_devices) JobStarted: {'identifier': 'loki_can_devices'}
[0.022244] (loki_can_devices) JobProgress: {'identifier': 'loki_can_devices', 'progress': 'cmake'}
[0.023156] (loki_can_devices) JobProgress: {'identifier': 'loki_can_devices', 'progress': 'build'}
[0.023323] (loki_can_devices) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices', '--', '-j12', '-l12'], 'cwd': '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'cairlab'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/cairlab'), ('OLDPWD', '/home/cairlab'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('SYSTEMD_EXEC_PID', '2238'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('_colcon_cd_root', '/opt/ros/humble/'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'cairlab'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'cairlab'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/home/cairlab/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/cairlab-System-Product-Name:@/tmp/.ICE-unix/2220,unix/cairlab-System-Product-Name:/tmp/.ICE-unix/2220'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/0a1688aa_ac16_47ef_8b76_ec91474c2528'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.HCXBB2'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.4105'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/loki_description:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/loki_description:/opt/ros/humble')]), 'shell': False}
[0.071739] (loki_can_devices) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target pytocpp\x1b[0m\n'}
[0.091221] (loki_can_devices) StdoutLine: {'line': b'[ 81%] Built target can\n'}
[0.099182] (-) TimerEvent: {}
[0.101512] (loki_can_devices) StdoutLine: {'line': b'[ 90%] \x1b[32mBuilding CXX object CMakeFiles/pytocpp.dir/src/py_to_cpp.cpp.o\x1b[0m\n'}
[0.199301] (-) TimerEvent: {}
[0.299548] (-) TimerEvent: {}
[0.399806] (-) TimerEvent: {}
[0.500050] (-) TimerEvent: {}
[0.600308] (-) TimerEvent: {}
[0.700552] (-) TimerEvent: {}
[0.800810] (-) TimerEvent: {}
[0.901146] (-) TimerEvent: {}
[1.001516] (-) TimerEvent: {}
[1.101829] (-) TimerEvent: {}
[1.202172] (-) TimerEvent: {}
[1.302509] (-) TimerEvent: {}
[1.402785] (-) TimerEvent: {}
[1.503044] (-) TimerEvent: {}
[1.603333] (-) TimerEvent: {}
[1.703608] (-) TimerEvent: {}
[1.803866] (-) TimerEvent: {}
[1.904129] (-) TimerEvent: {}
[2.004395] (-) TimerEvent: {}
[2.104676] (-) TimerEvent: {}
[2.204975] (-) TimerEvent: {}
[2.305271] (-) TimerEvent: {}
[2.405554] (-) TimerEvent: {}
[2.505834] (-) TimerEvent: {}
[2.606103] (-) TimerEvent: {}
[2.706364] (-) TimerEvent: {}
[2.806629] (-) TimerEvent: {}
[2.906888] (-) TimerEvent: {}
[3.007165] (-) TimerEvent: {}
[3.107430] (-) TimerEvent: {}
[3.207696] (-) TimerEvent: {}
[3.307962] (-) TimerEvent: {}
[3.408233] (-) TimerEvent: {}
[3.508494] (-) TimerEvent: {}
[3.608757] (-) TimerEvent: {}
[3.708980] (-) TimerEvent: {}
[3.809246] (-) TimerEvent: {}
[3.909488] (-) TimerEvent: {}
[4.009785] (-) TimerEvent: {}
[4.110058] (-) TimerEvent: {}
[4.210315] (-) TimerEvent: {}
[4.310565] (-) TimerEvent: {}
[4.410809] (-) TimerEvent: {}
[4.511071] (-) TimerEvent: {}
[4.611342] (-) TimerEvent: {}
[4.697683] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/service.hpp:36\x1b[m\x1b[K,\n'}
[4.698141] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:28\x1b[m\x1b[K,\n'}
[4.698368] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[4.698454] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[4.698544] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[4.698639] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[4.698724] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[4.698801] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[4.698876] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[4.698962] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[4.699036] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[4.699110] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.699214] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.699299] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.699381] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:67:62:\x1b[m\x1b[K   required from here\n'}
[4.699456] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99)\n'}
[4.699559] (loki_can_devices) StderrLine: {'line': b'  103 |       \x1b[01;31m\x1b[Kcallback_ = std::forward<CallbackT>(callback)\x1b[m\x1b[K;\n'}
[4.699634] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.699707] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[4.699780] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[4.699854] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[4.699936] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[4.700030] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[4.700132] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[4.700227] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[4.700321] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[4.700432] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[4.700539] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[4.700636] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[4.700722] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.700824] (loki_can_devices) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[4.700901] (loki_can_devices) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.700977] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.701052] (loki_can_devices) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.701161] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.701305] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.701391] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.701474] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.701579] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:67:62:\x1b[m\x1b[K   required from here\n'}
[4.701657] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.701737] (loki_can_devices) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[4.701812] (loki_can_devices) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.701886] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.701991] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.702108] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.702224] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:67:62:\x1b[m\x1b[K   required from here\n'}
[4.702329] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.702442] (loki_can_devices) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[4.702547] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.702645] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.702769] (loki_can_devices) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[4.702867] (loki_can_devices) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.702964] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.703145] (loki_can_devices) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[4.703253] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.703347] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.703460] (loki_can_devices) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[4.703563] (loki_can_devices) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[4.711443] (-) TimerEvent: {}
[4.811737] (-) TimerEvent: {}
[4.911989] (-) TimerEvent: {}
[5.012261] (-) TimerEvent: {}
[5.112525] (-) TimerEvent: {}
[5.212768] (-) TimerEvent: {}
[5.313044] (-) TimerEvent: {}
[5.413309] (-) TimerEvent: {}
[5.513630] (-) TimerEvent: {}
[5.613907] (-) TimerEvent: {}
[5.714175] (-) TimerEvent: {}
[5.814443] (-) TimerEvent: {}
[5.914714] (-) TimerEvent: {}
[6.015006] (-) TimerEvent: {}
[6.115295] (-) TimerEvent: {}
[6.215582] (-) TimerEvent: {}
[6.315867] (-) TimerEvent: {}
[6.416133] (-) TimerEvent: {}
[6.516393] (-) TimerEvent: {}
[6.616660] (-) TimerEvent: {}
[6.716926] (-) TimerEvent: {}
[6.817194] (-) TimerEvent: {}
[6.917473] (-) TimerEvent: {}
[7.017790] (-) TimerEvent: {}
[7.118072] (-) TimerEvent: {}
[7.218335] (-) TimerEvent: {}
[7.318601] (-) TimerEvent: {}
[7.418861] (-) TimerEvent: {}
[7.519142] (-) TimerEvent: {}
[7.619389] (-) TimerEvent: {}
[7.719652] (-) TimerEvent: {}
[7.819912] (-) TimerEvent: {}
[7.920188] (-) TimerEvent: {}
[8.020476] (-) TimerEvent: {}
[8.120760] (-) TimerEvent: {}
[8.221020] (-) TimerEvent: {}
[8.321302] (-) TimerEvent: {}
[8.421623] (-) TimerEvent: {}
[8.521898] (-) TimerEvent: {}
[8.622158] (-) TimerEvent: {}
[8.722422] (-) TimerEvent: {}
[8.822687] (-) TimerEvent: {}
[8.922951] (-) TimerEvent: {}
[9.023227] (-) TimerEvent: {}
[9.123509] (-) TimerEvent: {}
[9.223787] (-) TimerEvent: {}
[9.308048] (loki_can_devices) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/pytocpp.dir/build.make:76: CMakeFiles/pytocpp.dir/src/py_to_cpp.cpp.o] Error 1\n'}
[9.308328] (loki_can_devices) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:139: CMakeFiles/pytocpp.dir/all] Error 2\n'}
[9.308564] (loki_can_devices) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[9.311005] (loki_can_devices) CommandEnded: {'returncode': 2}
[9.323966] (-) TimerEvent: {}
[9.367840] (loki_can_devices) JobEnded: {'identifier': 'loki_can_devices', 'rc': 2}
[9.382745] (-) EventReactorShutdown: {}

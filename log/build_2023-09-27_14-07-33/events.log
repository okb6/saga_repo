[0.000000] (-) TimerEvent: {}
[0.000145] (-) JobUnselected: {'identifier': 'actionlib_msgs'}
[0.000196] (-) JobUnselected: {'identifier': 'common_interfaces'}
[0.000229] (-) JobUnselected: {'identifier': 'diagnostic_aggregator'}
[0.000248] (-) JobUnselected: {'identifier': 'diagnostic_common_diagnostics'}
[0.000405] (-) JobUnselected: {'identifier': 'diagnostic_msgs'}
[0.000767] (-) JobUnselected: {'identifier': 'diagnostic_updater'}
[0.000851] (-) JobUnselected: {'identifier': 'diagnostics'}
[0.000921] (-) JobUnselected: {'identifier': 'geometry_msgs'}
[0.000952] (-) JobUnselected: {'identifier': 'loki_base'}
[0.000976] (-) JobUnselected: {'identifier': 'loki_bringup'}
[0.001000] (-) JobUnselected: {'identifier': 'loki_description'}
[0.001017] (-) JobUnselected: {'identifier': 'loki_msgs'}
[0.001034] (-) JobUnselected: {'identifier': 'loki_simulator'}
[0.001092] (-) JobUnselected: {'identifier': 'loki_teleop'}
[0.001119] (-) JobUnselected: {'identifier': 'loki_twist_mux'}
[0.001157] (-) JobUnselected: {'identifier': 'nav_msgs'}
[0.001173] (-) JobUnselected: {'identifier': 'rasberry_gazebo'}
[0.001194] (-) JobUnselected: {'identifier': 'robot_bringup'}
[0.001214] (-) JobUnselected: {'identifier': 'self_test'}
[0.001241] (-) JobUnselected: {'identifier': 'sensor_msgs'}
[0.001273] (-) JobUnselected: {'identifier': 'sensor_msgs_py'}
[0.001297] (-) JobUnselected: {'identifier': 'shape_msgs'}
[0.001353] (-) JobUnselected: {'identifier': 'std_msgs'}
[0.001368] (-) JobUnselected: {'identifier': 'std_srvs'}
[0.001395] (-) JobUnselected: {'identifier': 'stereo_msgs'}
[0.001417] (-) JobUnselected: {'identifier': 'trajectory_msgs'}
[0.001440] (-) JobUnselected: {'identifier': 'twist_mux'}
[0.001460] (-) JobUnselected: {'identifier': 'visualization_msgs'}
[0.001516] (loki_can_devices) JobQueued: {'identifier': 'loki_can_devices', 'dependencies': OrderedDict([('loki_description', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_description'), ('std_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs'), ('std_srvs', '/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs'), ('geometry_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs'), ('diagnostic_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs'), ('nav_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs'), ('sensor_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs'), ('loki_msgs', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs')])}
[0.001557] (loki_can_devices) JobStarted: {'identifier': 'loki_can_devices'}
[0.023164] (loki_can_devices) JobProgress: {'identifier': 'loki_can_devices', 'progress': 'cmake'}
[0.024386] (loki_can_devices) JobProgress: {'identifier': 'loki_can_devices', 'progress': 'build'}
[0.024422] (loki_can_devices) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices', '--', '-j12', '-l12'], 'cwd': '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'cairlab'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs/lib:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/cairlab'), ('OLDPWD', '/home/cairlab'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('SYSTEMD_EXEC_PID', '2238'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('_colcon_cd_root', '/opt/ros/humble/'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'cairlab'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'cairlab'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/home/cairlab/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/cairlab-System-Product-Name:@/tmp/.ICE-unix/2220,unix/cairlab-System-Product-Name:/tmp/.ICE-unix/2220'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/0a1688aa_ac16_47ef_8b76_ec91474c2528'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.HCXBB2'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.4105'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/loki_description:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/cairlab/Documents/GitHub/saga_repo/build/loki_can_devices'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs/local/lib/python3.10/dist-packages:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/cairlab/Documents/GitHub/saga_repo/install/loki_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/sensor_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/nav_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/diagnostic_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/geometry_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/std_srvs:/home/cairlab/Documents/GitHub/saga_repo/install/std_msgs:/home/cairlab/Documents/GitHub/saga_repo/install/loki_description:/opt/ros/humble')]), 'shell': False}
[0.074550] (loki_can_devices) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target pytocpp\x1b[0m\n'}
[0.093438] (loki_can_devices) StdoutLine: {'line': b'[ 81%] Built target can\n'}
[0.099232] (-) TimerEvent: {}
[0.103907] (loki_can_devices) StdoutLine: {'line': b'[ 90%] \x1b[32mBuilding CXX object CMakeFiles/pytocpp.dir/src/py_to_cpp.cpp.o\x1b[0m\n'}
[0.199343] (-) TimerEvent: {}
[0.299675] (-) TimerEvent: {}
[0.399984] (-) TimerEvent: {}
[0.500225] (-) TimerEvent: {}
[0.600445] (-) TimerEvent: {}
[0.700719] (-) TimerEvent: {}
[0.800976] (-) TimerEvent: {}
[0.901236] (-) TimerEvent: {}
[1.001492] (-) TimerEvent: {}
[1.101739] (-) TimerEvent: {}
[1.202003] (-) TimerEvent: {}
[1.302282] (-) TimerEvent: {}
[1.402577] (-) TimerEvent: {}
[1.502839] (-) TimerEvent: {}
[1.603099] (-) TimerEvent: {}
[1.703357] (-) TimerEvent: {}
[1.803622] (-) TimerEvent: {}
[1.903883] (-) TimerEvent: {}
[2.004161] (-) TimerEvent: {}
[2.104441] (-) TimerEvent: {}
[2.204713] (-) TimerEvent: {}
[2.304984] (-) TimerEvent: {}
[2.405278] (-) TimerEvent: {}
[2.505544] (-) TimerEvent: {}
[2.605805] (-) TimerEvent: {}
[2.706066] (-) TimerEvent: {}
[2.806333] (-) TimerEvent: {}
[2.906595] (-) TimerEvent: {}
[3.006856] (-) TimerEvent: {}
[3.107093] (-) TimerEvent: {}
[3.207403] (-) TimerEvent: {}
[3.307696] (-) TimerEvent: {}
[3.408037] (-) TimerEvent: {}
[3.508290] (-) TimerEvent: {}
[3.608540] (-) TimerEvent: {}
[3.708774] (-) TimerEvent: {}
[3.809040] (-) TimerEvent: {}
[3.909334] (-) TimerEvent: {}
[4.009598] (-) TimerEvent: {}
[4.109868] (-) TimerEvent: {}
[4.210139] (-) TimerEvent: {}
[4.310424] (-) TimerEvent: {}
[4.410754] (-) TimerEvent: {}
[4.511054] (-) TimerEvent: {}
[4.611303] (-) TimerEvent: {}
[4.629641] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/service.hpp:36\x1b[m\x1b[K,\n'}
[4.629826] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:28\x1b[m\x1b[K,\n'}
[4.629926] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[4.630246] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[4.630312] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[4.630366] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[4.630418] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[4.630467] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[4.630517] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[4.630573] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[4.630622] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[4.630672] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.630732] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.630788] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.630843] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:67:62:\x1b[m\x1b[K   required from here\n'}
[4.630892] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99)\n'}
[4.630966] (loki_can_devices) StderrLine: {'line': b'  103 |       \x1b[01;31m\x1b[Kcallback_ = std::forward<CallbackT>(callback)\x1b[m\x1b[K;\n'}
[4.631016] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.631064] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[4.631112] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[4.631159] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[4.631207] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[4.631256] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[4.631307] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[4.631356] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[4.631404] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[4.631452] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[4.631499] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[4.631547] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[4.631595] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.631656] (loki_can_devices) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[4.631704] (loki_can_devices) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.631752] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.631800] (loki_can_devices) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>&&; <template-parameter-2-2> = void; _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.631868] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&> std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.631962] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp:103:17:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.632020] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.632075] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.632133] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:67:62:\x1b[m\x1b[K   required from here\n'}
[4.632181] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.632231] (loki_can_devices) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[4.632279] (loki_can_devices) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.632327] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_service_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Kvoid rclcpp::AnyServiceCallback<ServiceT>::set(CallbackT&&) [with CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename std::enable_if<(! rclcpp::detail::can_be_nullptr<CallbackT>::value), int>::type <anonymous> = 0; ServiceT = loki_msgs::srv::SimDrive]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.632388] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_service.hpp:43:27:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::create_service(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface>, std::shared_ptr<rclcpp::node_interfaces::NodeServicesInterface>, const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.632446] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:147:53:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Ktypename rclcpp::Service<ServiceT>::SharedPtr rclcpp::Node::create_service(const string&, CallbackT&&, const rmw_qos_profile_t&, rclcpp::CallbackGroup::SharedPtr) [with ServiceT = loki_msgs::srv::SimDrive; CallbackT = std::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>; typename rclcpp::Service<ServiceT>::SharedPtr = std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >; std::string = std::__cxx11::basic_string<char>; rmw_qos_profile_t = rmw_qos_profile_s; rclcpp::CallbackGroup::SharedPtr = std::shared_ptr<rclcpp::CallbackGroup>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.632502] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:67:62:\x1b[m\x1b[K   required from here\n'}
[4.632551] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.632604] (loki_can_devices) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[4.632692] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.632739] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.632802] (loki_can_devices) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[4.632850] (loki_can_devices) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.632898] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.633031] (loki_can_devices) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[4.633082] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.633131] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<bool (PyToCpp::*(PyToCpp*, std::_Placeholder<1>, std::_Placeholder<2>))(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::monostate, std::function<void(std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >, std::shared_ptr<loki_msgs::srv::SimDrive_Response_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<rclcpp::Service<loki_msgs::srv::SimDrive> >, std::shared_ptr<rmw_request_id_s>, std::shared_ptr<loki_msgs::srv::SimDrive_Request_<std::allocator<void> > >)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.633190] (loki_can_devices) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[4.633238] (loki_can_devices) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[4.711424] (-) TimerEvent: {}
[4.811682] (-) TimerEvent: {}
[4.911937] (-) TimerEvent: {}
[5.012231] (-) TimerEvent: {}
[5.112529] (-) TimerEvent: {}
[5.165708] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[5.166025] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[5.166416] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[5.166493] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[5.166575] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[5.166630] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[5.166682] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[5.166734] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[5.166784] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[5.166833] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[5.166882] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.166932] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.167003] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.167065] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.167126] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.167189] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.167255] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:82:67:\x1b[m\x1b[K   required from here\n'}
[5.167305] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>::function(std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.167360] (loki_can_devices) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[5.167410] (loki_can_devices) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.167458] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/future:47\x1b[m\x1b[K,\n'}
[5.167506] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18\x1b[m\x1b[K,\n'}
[5.167554] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[5.167602] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.167651] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.167702] (loki_can_devices) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[5.167750] (loki_can_devices) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.167798] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[5.167847] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/move.h:57\x1b[m\x1b[K,\n'}
[5.167896] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_pair.h:59\x1b[m\x1b[K,\n'}
[5.167944] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/stl_algobase.h:64\x1b[m\x1b[K,\n'}
[5.167997] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/memory:63\x1b[m\x1b[K,\n'}
[5.168045] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:153\x1b[m\x1b[K,\n'}
[5.168092] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.168141] (loki_can_devices) StderrLine: {'line': b'/usr/include/c++/11/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.168191] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:353:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>::_Callable<std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>&, std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>, std::__invoke_result<std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>&, const loki_msgs::msg::BaseState_<std::allocator<void> >&> >; _Tp = void; _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.168245] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:434:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.168305] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.168366] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.168429] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.168486] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.168551] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:82:67:\x1b[m\x1b[K   required from here\n'}
[5.168600] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/type_traits:2205:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.168669] (loki_can_devices) StderrLine: {'line': b' 2205 |     using \x1b[01;31m\x1b[K__enable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[5.168719] (loki_can_devices) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[5.168768] (loki_can_devices) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/future:47\x1b[m\x1b[K,\n'}
[5.168816] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:18\x1b[m\x1b[K,\n'}
[5.168869] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[5.168917] (loki_can_devices) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:1\x1b[m\x1b[K:\n'}
[5.168966] (loki_can_devices) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[5.169018] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169073] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = loki_msgs::msg::BaseState_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169136] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169204] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = loki_msgs::msg::BaseState_<std::allocator<void> >; CallbackT = std::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<loki_msgs::msg::BaseState_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<loki_msgs::msg::BaseState_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169259] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/home/cairlab/Documents/GitHub/saga_repo/ros2_thor/src/loki/loki_can_devices/src/py_to_cpp.cpp:82:67:\x1b[m\x1b[K   required from here\n'}
[5.169307] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169357] (loki_can_devices) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[5.169406] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.169455] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169506] (loki_can_devices) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[5.169554] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[5.169608] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169670] (loki_can_devices) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[5.169719] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.169768] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169825] (loki_can_devices) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[5.169873] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[5.169921] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.169979] (loki_can_devices) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[5.170027] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.170075] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (PyToCpp::*(PyToCpp*, int))(const loki_msgs::msg::BaseState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.170130] (loki_can_devices) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[5.170178] (loki_can_devices) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[5.170226] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {const loki_msgs::msg::BaseState_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[5.170276] (loki_can_devices) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[5.170323] (loki_can_devices) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[5.170370] (loki_can_devices) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[5.212652] (-) TimerEvent: {}
[5.312882] (-) TimerEvent: {}
[5.413176] (-) TimerEvent: {}
[5.513426] (-) TimerEvent: {}
[5.613705] (-) TimerEvent: {}
[5.714010] (-) TimerEvent: {}
[5.814273] (-) TimerEvent: {}
[5.914535] (-) TimerEvent: {}
[6.014822] (-) TimerEvent: {}
[6.115083] (-) TimerEvent: {}
[6.215348] (-) TimerEvent: {}
[6.315611] (-) TimerEvent: {}
[6.415881] (-) TimerEvent: {}
[6.516149] (-) TimerEvent: {}
[6.616411] (-) TimerEvent: {}
[6.716684] (-) TimerEvent: {}
[6.816938] (-) TimerEvent: {}
[6.917200] (-) TimerEvent: {}
[7.017464] (-) TimerEvent: {}
[7.117729] (-) TimerEvent: {}
[7.218025] (-) TimerEvent: {}
[7.318301] (-) TimerEvent: {}
[7.418692] (-) TimerEvent: {}
[7.519005] (-) TimerEvent: {}
[7.619307] (-) TimerEvent: {}
[7.719589] (-) TimerEvent: {}
[7.819936] (-) TimerEvent: {}
[7.920172] (-) TimerEvent: {}
[8.020433] (-) TimerEvent: {}
[8.120722] (-) TimerEvent: {}
[8.220982] (-) TimerEvent: {}
[8.321288] (-) TimerEvent: {}
[8.421615] (-) TimerEvent: {}
[8.521871] (-) TimerEvent: {}
[8.622150] (-) TimerEvent: {}
[8.722416] (-) TimerEvent: {}
[8.822665] (-) TimerEvent: {}
[8.922928] (-) TimerEvent: {}
[9.023189] (-) TimerEvent: {}
[9.123452] (-) TimerEvent: {}
[9.146288] (loki_can_devices) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/pytocpp.dir/build.make:76: CMakeFiles/pytocpp.dir/src/py_to_cpp.cpp.o] Error 1\n'}
[9.146542] (loki_can_devices) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:139: CMakeFiles/pytocpp.dir/all] Error 2\n'}
[9.146769] (loki_can_devices) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[9.148447] (loki_can_devices) CommandEnded: {'returncode': 2}
[9.202588] (loki_can_devices) JobEnded: {'identifier': 'loki_can_devices', 'rc': 2}
[9.217100] (-) EventReactorShutdown: {}
